// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Home /> Should render like snapshot 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      collapsable={false}
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      onLayout={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "flexDirection": "row",
          },
        ]
      }
    >
      <View
        style={
          Array [
            Object {
              "flex": 1,
            },
            Object {
              "transform": Array [
                Object {
                  "translateX": AnimatedValue {
                    " __value": 0,
                  },
                },
              ],
            },
            Array [
              Object {
                "backgroundColor": "rgb(242, 242, 242)",
              },
              undefined,
            ],
          ]
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          style={
            Object {
              "flex": 1,
            }
          }
        >
          <View
            enabled={true}
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              collapsable={false}
              enabled={true}
              pointerEvents="auto"
              removeClippedSubviews={false}
              style={
                Array [
                  Object {
                    "flex": 1,
                  },
                  Object {
                    "overflow": "hidden",
                  },
                  Array [
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 0,
                    },
                    Object {
                      "opacity": 1,
                    },
                  ],
                ]
              }
            >
              <View
                style={
                  Object {
                    "flex": 1,
                  }
                }
              >
                <View
                  testID="HomeScreen"
                >
                  <Text>
                    HomePage
                  </Text>
                  <View
                    accessibilityRole="button"
                    accessibilityState={
                      Object {
                        "disabled": undefined,
                      }
                    }
                    accessible={true}
                    focusable={true}
                    hitSlop={
                      Object {
                        "bottom": 6,
                        "left": 6,
                        "right": 6,
                        "top": 6,
                      }
                    }
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        Object {
                          "overflow": "hidden",
                        },
                        Array [
                          Object {
                            "alignItems": "center",
                            "justifyContent": "center",
                            "margin": 6,
                            "overflow": "hidden",
                          },
                          Object {
                            "borderRadius": 18,
                            "height": 36,
                            "width": 36,
                          },
                          undefined,
                          undefined,
                        ],
                      ]
                    }
                    testID="HamburgerIcon"
                  >
                    <View>
                      <Text />
                    </View>
                  </View>
                  <AIRMap
                    className="sc-bdfBwQ eA-dDSP"
                    handlePanDrag={false}
                    initialRegion={null}
                    onChange={[Function]}
                    onLayout={[Function]}
                    onMapReady={[Function]}
                    onMarkerPress={[Function]}
                    region={null}
                  />
                </View>
              </View>
            </View>
          </View>
        </View>
        <View
          collapsable={false}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          style={
            Array [
              Object {
                "backgroundColor": "rgba(0, 0, 0, 0.5)",
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
              Object {},
              Object {
                "opacity": undefined,
                "zIndex": -1,
              },
              Object {
                "backgroundColor": "rgba(0, 0, 0, 0.5)",
              },
            ]
          }
        />
      </View>
      <View
        accessibilityViewIsModal={false}
        onLayout={[Function]}
        removeClippedSubviews={false}
        style={
          Array [
            Object {
              "backgroundColor": "white",
              "maxWidth": "100%",
            },
            Object {
              "opacity": AnimatedValue {
                " __value": 0,
              },
              "transform": Array [
                Object {
                  "translateX": 0,
                },
              ],
            },
            Array [
              Object {
                "bottom": 0,
                "position": "absolute",
                "top": 0,
                "width": "80%",
              },
              Object {
                "left": AnimatedValue {
                  " __value": -320,
                },
              },
              Object {
                "zIndex": 0,
              },
            ],
            Array [
              Object {
                "backgroundColor": "rgb(255, 255, 255)",
                "width": 320,
              },
              false,
              undefined,
            ],
          ]
        }
      >
        <RCTScrollView
          contentContainerStyle={
            Array [
              Object {
                "paddingLeft": 0,
                "paddingRight": 0,
                "paddingTop": 24,
              },
              undefined,
            ]
          }
          descriptors={
            Object {
              "About-1XUhL-YuVO0rYOrR_NFV0": Object {
                "navigation": Object {
                  "addListener": [Function],
                  "canGoBack": [Function],
                  "closeDrawer": [Function],
                  "dangerouslyGetParent": [Function],
                  "dangerouslyGetState": [Function],
                  "dispatch": [Function],
                  "goBack": [Function],
                  "isFocused": [Function],
                  "jumpTo": [Function],
                  "navigate": [Function],
                  "openDrawer": [Function],
                  "removeListener": [Function],
                  "reset": [Function],
                  "setOptions": [Function],
                  "setParams": [Function],
                  "toggleDrawer": [Function],
                },
                "options": Object {},
                "render": [Function],
              },
              "Home-H2KEXnpvQGKHjPzeqZkU6": Object {
                "navigation": Object {
                  "addListener": [Function],
                  "canGoBack": [Function],
                  "closeDrawer": [Function],
                  "dangerouslyGetParent": [Function],
                  "dangerouslyGetState": [Function],
                  "dispatch": [Function],
                  "goBack": [Function],
                  "isFocused": [Function],
                  "jumpTo": [Function],
                  "navigate": [Function],
                  "openDrawer": [Function],
                  "removeListener": [Function],
                  "reset": [Function],
                  "setOptions": [Function],
                  "setParams": [Function],
                  "toggleDrawer": [Function],
                },
                "options": Object {},
                "render": [Function],
              },
            }
          }
          navigation={
            Object {
              "canGoBack": [Function],
              "closeDrawer": [Function],
              "dangerouslyGetParent": [Function],
              "dangerouslyGetState": [Function],
              "dispatch": [Function],
              "emit": [Function],
              "goBack": [Function],
              "isFocused": [Function],
              "jumpTo": [Function],
              "navigate": [Function],
              "openDrawer": [Function],
              "reset": [Function],
              "setParams": [Function],
              "toggleDrawer": [Function],
            }
          }
          progress={0}
          state={
            Object {
              "history": Array [
                Object {
                  "key": "Home-H2KEXnpvQGKHjPzeqZkU6",
                  "type": "route",
                },
              ],
              "index": 0,
              "key": "drawer-gT_jxeifTrHt3u_YGGLlQ",
              "routeNames": Array [
                "Home",
                "About",
              ],
              "routes": Array [
                Object {
                  "key": "Home-H2KEXnpvQGKHjPzeqZkU6",
                  "name": "Home",
                  "params": undefined,
                },
                Object {
                  "key": "About-1XUhL-YuVO0rYOrR_NFV0",
                  "name": "About",
                  "params": undefined,
                },
              ],
              "stale": false,
              "type": "drawer",
            }
          }
          style={
            Array [
              Object {
                "flex": 1,
              },
              undefined,
            ]
          }
          testID="CustomDrawerContent"
        >
          <View>
            <View
              collapsable={false}
              style={
                Array [
                  Object {
                    "marginHorizontal": 10,
                    "marginVertical": 4,
                    "overflow": "hidden",
                  },
                  Object {
                    "backgroundColor": "rgba(0, 122, 255, 0.12)",
                    "borderRadius": 4,
                  },
                  undefined,
                ]
              }
            >
              <RNGestureHandlerButton
                accessibilityComponentType="button"
                accessibilityRole="button"
                accessibilityState={
                  Object {
                    "selected": true,
                  }
                }
                accessibilityStates={
                  Array [
                    "selected",
                  ]
                }
                accessibilityTraits={
                  Array [
                    "button",
                    "selected",
                  ]
                }
                activeOpacity={0.3}
                borderless={true}
                collapsable={false}
                delayPressIn={0}
                onActiveStateChange={[Function]}
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                onPress={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "flexDirection": "row",
                        "padding": 8,
                      },
                      Object {
                        "borderRadius": 4,
                      },
                    ]
                  }
                >
                  <View
                    style={
                      Array [
                        Object {
                          "flex": 1,
                          "marginRight": 32,
                        },
                        Object {
                          "marginLeft": 0,
                          "marginVertical": 5,
                        },
                      ]
                    }
                  >
                    <Text
                      numberOfLines={1}
                      style={
                        Array [
                          Object {
                            "color": "rgb(0, 122, 255)",
                            "fontWeight": "500",
                          },
                          undefined,
                        ]
                      }
                    >
                      Home
                    </Text>
                  </View>
                </View>
              </RNGestureHandlerButton>
            </View>
            <View
              collapsable={false}
              style={
                Array [
                  Object {
                    "marginHorizontal": 10,
                    "marginVertical": 4,
                    "overflow": "hidden",
                  },
                  Object {
                    "backgroundColor": "transparent",
                    "borderRadius": 4,
                  },
                  undefined,
                ]
              }
            >
              <RNGestureHandlerButton
                accessibilityComponentType="button"
                accessibilityRole="button"
                accessibilityState={
                  Object {
                    "selected": false,
                  }
                }
                accessibilityStates={Array []}
                accessibilityTraits="button"
                activeOpacity={0.3}
                borderless={true}
                collapsable={false}
                delayPressIn={0}
                onActiveStateChange={[Function]}
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                onPress={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "flexDirection": "row",
                        "padding": 8,
                      },
                      Object {
                        "borderRadius": 4,
                      },
                    ]
                  }
                >
                  <View
                    style={
                      Array [
                        Object {
                          "flex": 1,
                          "marginRight": 32,
                        },
                        Object {
                          "marginLeft": 0,
                          "marginVertical": 5,
                        },
                      ]
                    }
                  >
                    <Text
                      numberOfLines={1}
                      style={
                        Array [
                          Object {
                            "color": "rgba(28, 28, 30, 0.68)",
                            "fontWeight": "500",
                          },
                          undefined,
                        ]
                      }
                    >
                      About
                    </Text>
                  </View>
                </View>
              </RNGestureHandlerButton>
            </View>
          </View>
        </RCTScrollView>
      </View>
    </View>
  </RNCSafeAreaProvider>
</View>
`;
